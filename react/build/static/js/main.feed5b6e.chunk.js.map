{"version":3,"sources":["serviceWorker.js","utils/asyncComponent.jsx","router/index.js","index.js","store/reducer.js","store/index.js","store/action-type.js"],"names":["Boolean","window","location","hostname","match","asyncComponent","importComponent","_Component","AsyncComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","component","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","_ref","wrap","_context","prev","next","sent","default","setState","stop","apply","arguments","C","react_default","createElement","Component","showVideo","__webpack_require__","e","then","bind","display","Promise","all","RouteConfig","react_router_dom","react_router","path","exact","from","to","defaultState","addressList","addressName","temMessage","hasAddressList","operate","userInfo","geohash","store","createStore","length","undefined","action","type","objectSpread","defineProperty","datatype","applyMiddleware","thunk","Route","ReactDOM","render","es","react_hot_loader","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.feed5b6e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\n/**\n * 异步加载模块\n * @param {*} importComponent \n */\nexport default function asyncComponent(importComponent) {\n  class AsyncComponent extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        component: null\n      };\n    }\n\n    async componentDidMount() {\n      const { default: component } = await importComponent();\n\n      this.setState({ component });\n    }\n\n    render() {\n      const C = this.state.component;\n\n      return C ? <C {...this.props} /> : null;\n    }\n  }\n  return AsyncComponent;\n}","import React, { Component } from 'react'\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom'\nimport asyncComponent from '../utils/asyncComponent'\n// const login = asyncComponent(() =>import (\"../pages/login/login\"))\nconst showVideo = asyncComponent(() =>import (\"../pages/show-video/show-video\"))\nconst display = asyncComponent(() =>import (\"../pages/display/display\"))\n\nexport default class RouteConfig extends Component {\n    render() {\n        return ( \n        <HashRouter >\n           <Switch >\n                <Route path = \"/display\"  component = { display }/>  \n                {/* <Route path = '/showVideo/:url'  component = { showVideo }/>  */}\n                <Route path = '/showVideo'  component = { showVideo }/>  \n\n                <Redirect exact from = '/' to = '/display' />\n                <Route component = { display }/>\n           </Switch> \n        </HashRouter>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport {AppContainer} from 'react-hot-loader'\nimport Route from './router'\nimport store from \"./store\";\n\nconst render = Component => {\n    ReactDOM.render(\n      <Provider store={store}>\n        <AppContainer>\n          <Component/>\n        </AppContainer>\n      </Provider>,\n\n      document.getElementById('root')\n    )\n  }\n  \n  render(Route)\n\nserviceWorker.unregister();\n","import * as user from './action-type'\n\nlet defaultState = {\n  addressList: [],   // 地址列表\n  addressName: '',  // 选中的地址\n  temMessage: '', //临时姓名\n  hasAddressList: [], // 已有的地址\n  operate: 'edit',\n  userInfo: {},\n  geohash: []\n}\n\n// 用户消息\nexport default (state = defaultState, action = {}) => {\n  switch (action.type) {\n    case user.SAVE_USERINFO:\n      return {\n        ...state,\n        userInfo: action.userInfo\n      }\n    case user.SAVE_ATTRINFO:\n      return {...state, ...{[action.datatype]: action.value}};\n    case user.MODIFY_USERINFO:\n      return {...state, userInfo: {...state.userInfo, [action.key]: action.value}};\n    default:\n      return state\n  }\n}","import {createStore, applyMiddleware} from 'redux'\nimport userReducer from './reducer'\nimport thunk from 'redux-thunk'\n\nlet store = createStore(\n  userReducer,\n  applyMiddleware(thunk)\n)\n\nexport default store","\n// 保存用户数据\nexport const SAVE_USERINFO = 'SAVE_USERINFO'\n\n// 保存用户信息\nexport const SAVE_ATTRINFO = 'SAVE_ATTRINFO'\n\n// 修改用信息\nexport const MODIFY_USERINFO = 'MODIFY_USERINFO'\n"],"sourceRoot":""}